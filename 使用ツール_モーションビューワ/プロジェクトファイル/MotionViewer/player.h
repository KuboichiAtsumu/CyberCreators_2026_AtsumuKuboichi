//=======================================================================================================================================================================================================================
//
// プレイヤーの処理に関するヘッダーファイル
// Author : Atsumu Kuboichi
//
//=======================================================================================================================================================================================================================
#ifndef _PLAYER_H_	//このマクロ定義がされなかったら
#define _PLAYER_H_	//2重インクルード防止のマクロ定義

#include "main.h"

//=======================================================================================================================================================================================================================
// マクロ定義
//=======================================================================================================================================================================================================================

//================================================================
// プレイヤー関連
//================================================================
#define JUMP_SPEED		(0.2f)	//ジャンプの上昇速度
#define PLAYER_GRAVITY	(1.0f)	//重力の強さ
#define SPEED_DERAY		(0.2f)	//減衰の強さ
#define TURN_SPEED		(0.4f)	//回転速度
#define COLLISION_WALL	(8.0f)	//壁の当たり判定調整用
#define MAX_PLAYERMAT	(100)	//各モデルのマテリアル数の最大数
#define ADD_SPEED		(0.05f)	//スピード加算数
#define ADD_JUMP		(0.05f)	//ジャンプ量加算数
#define JUDGE_MOVE		(1.0f)

//================================================================
// モーション関連
//================================================================
#define MAX_PARTS			(100)	//パーツ最大数
#define MAX_MOTION			(100)	//モーション数
#define MAX_KEYSET			(100)	//キーの最大数
#define MAX_KEYSET_FRAME	(600)	//最大フレーム数
#define EDIT_POS			(0.1f)	//エディタ時の位置の移動量
#define EDIT_ROT			(D3DX_PI * 0.01f)	//エディタ時の向きの回転量

//=======================================================================================================================================================================================================================
// 構造体
//=======================================================================================================================================================================================================================

//================================================================
// キーの情報構造体
//================================================================
typedef struct
{
	D3DXVECTOR3 pos;	//位置
	D3DXVECTOR3 rot;	//向き
}Key;

//================================================================
// キーセットの情報構造体
//================================================================
typedef struct
{
	Key aKey[MAX_PARTS];	//キーの情報の構造体
	int nMaxFrame;			//最大フレーム数
}KeySet;

//================================================================
// モーションの情報構造体
//================================================================
typedef struct
{
	int nCntKeySet;				//キー数カウンタ
	int nCntFrame;				//フレーム数カウンタ
	int nMaxKeySet;				//各モーションの最大キーセット数
	int nLoop;					//各モーションがループするかどうか
	KeySet aKeyset[MAX_KEYSET];	//パーツの情報
}MotionSet;

//================================================================
// 各パーツの構造体
//================================================================
typedef struct
{
	LPD3DXMESH pMesh;							//メッシュの頂点情報へのポインタ
	LPD3DXBUFFER pBuffMat;						//マテリアルへのポインタ
	DWORD dwNumMat;								//マテリアルの数
	D3DXMATRIX mtxWorld;						//ワールドマトリックス
	D3DCOLORVALUE Diffuse[MAX_PLAYERMAT];		//マテリアル情報
	D3DCOLORVALUE FirstDiffuse[MAX_PLAYERMAT];	//マテリアル情報初期値
	D3DXVECTOR3 pos;							//位置
	D3DXVECTOR3 rot;							//向き
	int nParent;								//親の番号
	int nHalf;									//半身の判定
	char aPartsFile[MAX_TEXT];					//パーツのファイル名
}ModelParts;

//================================================================
// プレイヤーの構造体
//================================================================
typedef struct
{
	MotionSet aMotion[MAX_MOTION];	//上半身のモーション情報の構造体
	MotionSet aMotion2[MAX_MOTION];	//下半身のモーション情報の構造体
	ModelParts aParts[MAX_PARTS];	//パーツ情報の構造体
	D3DXVECTOR3 pos;				//位置
	D3DXVECTOR3 oldpos;				//過去の位置
	D3DXVECTOR3 vtxMin;				//最小値
	D3DXVECTOR3 vtxMax;				//最大値
	D3DXVECTOR3 move;				//移動量
	D3DXVECTOR3 rot;				//向き
	D3DXMATRIX mtxWorld;			//ワールドマトリックス
	int nParts;						//パーツ数
	int nState;						//モーション(状態)数
	float fSpeed;					//速度
	float fJump;					//ジャンプ上昇量
}Player;

//=======================================================================================================================================================================================================================
// 各モーション名
//=======================================================================================================================================================================================================================
static const char* MOTION_NAME[MAX_MOTION] =
{
	"ニュートラル",	//[0]ニュートラル
	"移動",			//[1]移動
	"アクション",	//[2]アクション
	"ジャンプ",		//[3]ジャンプ
	"着地",			//[4]着地
};

//=======================================================================================================================================================================================================================
// プロトタイプ宣言
//=======================================================================================================================================================================================================================
void InitPlayer(void);		//初期化処理
void UninitPlayer(void);	//終了処理
void UpdatePlayer(void);	//更新処理
void DrawPlayer(void);		//描画処理
void EditMotion(void);		//モーションの作成
void WriteMotion(void);		//モーション情報の書き出し
void WriteNowMotion(void);	//現在のモーション情報の書き出し
void OperatePlayer(void);	//プレイヤーの操作
void UpBodyMotion(void);	//上半身のモーション処理
void DownBodyMotion(void);	//下半身のモーション処理
void LoadParts(void);		//パーツ情報の読み込み処理
void LoadMotion(void);		//モーションの読み込み処理
void CorrectionRot(float& fRot);//角度補正
Player* GetPlayer(void);	//プレイヤー情報の構造体を取得
#endif