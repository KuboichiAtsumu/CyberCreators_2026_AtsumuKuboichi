//==============================================================================================================================================
//
// エリア管理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "areamanager.h"
#include "game.h"

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CAreaManager::CAreaManager() : CObjectManager()
{
	//メンバ変数初期化
	m_pTop = nullptr;//先頭アドレス
	m_pCur = nullptr;//終端アドレス
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CAreaManager::~CAreaManager()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CAreaManager::Init()
{
	//オブジェクトマネージャー初期化処理
	if (FAILED(CObjectManager::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CAreaManager::Uninit()
{
	//オブジェクトマネージャー終了処理
	CObjectManager::Uninit();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CAreaManager::Update()
{
	//先頭アドレスを取得する
	CArea* pArea = m_pTop;

	//オブジェクト情報がnullptrになるまで繰り返す
	while (pArea != nullptr)
	{
		//次のオブジェクト情報を取得
		CArea* pNext = pArea->GetNextArea();

		//エリア情報が存在する場合
		//削除フラグがtrueの場合
		if (pArea != nullptr && pArea->GetDeleteFlag())
		{
			//前のオブジェクト情報を取得
			CArea* pPrev = pArea->GetPrevArea();

			//前のオブジェクト情報が存在する場合
			if (pPrev != nullptr)
			{
				//次のオブジェクト情報を繋ぐ
				pPrev->SetNextArea(pNext);
			}
			//前のオブジェクト情報が存在しない場合
			else
			{
				//次ののオブジェクト情報の前のオブジェクト情報をnullptrに設定
				pNext->SetPrevArea(nullptr);

				//先頭アドレスを変更
				m_pTop = pNext;
			}

			//次のオブジェクト情報が存在する場合
			if (pNext != nullptr)
			{
				//前のオブジェクト情報を繋ぐ
				pNext->SetPrevArea(pPrev);
			}
			//次のオブジェクト情報が存在しない場合
			else
			{
				//前のオブジェクト情報の次のオブジェクト情報をnullptrに設定
				pPrev->SetNextArea(nullptr);

				//終端アドレスを変更
				m_pCur = pPrev;
			}
		}

		//オブジェクト情報を次の情報に変更する
		pArea = pNext;
	}
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CAreaManager::Draw()
{
}

//===========================================================================================================
// 登録処理
//===========================================================================================================
void CAreaManager::Regist(CArea* pArea)
{
	//先頭アドレスが存在しない場合
	if (m_pTop == nullptr)
	{
		//生成したエリア情報を先頭アドレスに代入
		m_pTop = pArea;

		//前のオブジェクト情報にnullptrを代入
		pArea->SetPrevArea(nullptr);
	}

	//先頭アドレスが存在する場合
	else
	{
		//先頭アドレスを取得
		CArea* pAllArea = m_pTop;

		//オブジェクト情報がnullptrになるまで繰り返す
		while (pAllArea != nullptr)
		{
			//次のオブジェクト情報が存在しない場合
			if (pAllArea->GetNextArea() == nullptr)
			{
				//次のオブジェクト情報に生成したエリア情報を保存
				pAllArea->SetNextArea(pArea);

				//生成したエリア情報の前のオブジェクト情報を保存
				pArea->SetPrevArea(pAllArea);
				break;
			}

			//オブジェクト情報を次の情報に変更する
			pAllArea = pAllArea->GetNextArea();
		}
	}

	//自身の次のオブジェクト情報にnullptrを代入
	pArea->SetNextArea(nullptr);

	//終端アドレスを代入
	m_pCur = pArea;
}

//===========================================================================================================
// 読込処理
//===========================================================================================================
void CAreaManager::Load()
{
	//ローカル変数宣言
	CManager* pManager = CManager::GetInstance();//マネージャーのインスタンス
	D3DXVECTOR3 pos = { 0.0f, 0.0f, 0.0f };//座標情報保存用
	D3DXVECTOR3 rot = { 0.0f, 0.0f, 0.0f };//角度情報保存用
	D3DXVECTOR3 scale = { 0.0f, 0.0f, 0.0f };//拡大率情報保存用
	int nTag = 1;//タグ情報保存用
	int nType = 0;//タイプ情報保存用
	int nNumAll = 0;//総数

	//ファイルを開く
	FILE* pFile = fopen(pManager->StageFile[static_cast<int>(pManager->GetScene()->GetMode())], "rb");

	//ファイルが開けなかった
	if (pFile == nullptr)
	{
		//処理を受ける
		return;
	}

	//ファイルの読み込み
	fread(&nNumAll, sizeof(int), 1, pFile);

	for (int nCnt = 0; nCnt < nNumAll; nCnt++)
	{
		//データの取得
		fread(&pos, sizeof(D3DXVECTOR3), 1, pFile);//座標
		fread(&rot, sizeof(D3DXVECTOR3), 1, pFile);//角度
		fread(&scale, sizeof(D3DXVECTOR3), 1, pFile);//拡大率
		fread(&nTag, sizeof(int), 1, pFile);//タグ
		fread(&nType, sizeof(int), 1, pFile);//種類

		//タグがエリアではない場合
		if (static_cast<CTag::TAG>(nTag) != CTag::TAG::AREA)
		{
			//生成せずに読込を続ける
			continue;
		}

		//エリアを生成
		CArea::Create(pos, rot, scale, static_cast<CArea::TYPE>(nType));
	}

	//ファイルを閉じる
	fclose(pFile);
}

//===========================================================================================================
// 当たり判定
//===========================================================================================================
bool CAreaManager::Collision(const D3DXVECTOR3& pos)
{
	//先頭アドレスを取得する
	CArea* pArea = m_pTop;

	//オブジェクト情報がnullptrになるまで繰り返す
	while (pArea != nullptr)
	{
		//次のオブジェクト情報を取得
		CArea* pNext = pArea->GetNextArea();

		//エリア情報が存在する場合
		if (pArea != nullptr && pArea->Collision(pos))
		{
			return true;
		}

		//オブジェクト情報を次の情報に変更する
		pArea = pNext;
	}

	return false;
}

//===========================================================================================================
// 検索処理
//===========================================================================================================
CArea* CAreaManager::FindArea(CArea::TYPE type)
{
	//先頭のポインタをコピー
	CArea* pArea = m_pTop;

	//次のブロック情報がnullptrになるまで繰り返す
	while (pArea != nullptr)
	{
		//タイプが一致した場合
		if (pArea->GetAreaType() == type)
		{
			//ポインタを返す
			return pArea;
		}

		//次のブロック情報のポインタをコピー
		pArea = pArea->GetNextArea();
	}

	return nullptr;
}
