//==============================================================================================================================================
//
// ミニゲーム失敗演出に関する処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "minigamefailed.h"

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CMiniGameFailed::CMiniGameFailed(int nPriority) : CBillboardEffect(nPriority),
	m_pTargetObj(nullptr),
	m_DiffDistance( 0.0f, 0.0f, 0.0f ),
	m_nDisPlayTime(MAX_FRAME * DISPLAY_TIME)
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CMiniGameFailed::~CMiniGameFailed()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CMiniGameFailed::Init()
{
	//基底クラス初期化処理
	if (FAILED(CBillboardEffect::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CMiniGameFailed::Uninit()
{
	//基底クラス終了処理
	CBillboardEffect::Uninit();
}

//===========================================================================================================
// 解放処理
//===========================================================================================================
void CMiniGameFailed::Release()
{
	//対象オブジェクトをnullptrにする
	m_pTargetObj = nullptr;

	//基底クラス解放処理
	CBillboardEffect::Release();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CMiniGameFailed::Update()
{
	//座標調節
	OffSetPos();

	//表示時間減少
	DecDisPlayTime();

	//基底クラス更新処理
	CBillboardEffect::Update();
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CMiniGameFailed::Draw()
{
	//基底クラス描画処理
	CBillboardEffect::Draw();
}

//===========================================================================================================
// 生成処理
//===========================================================================================================
CMiniGameFailed* CMiniGameFailed::Create(const D3DXVECTOR3& pos, CObject3D* pObj)
{
	//メモリを動的確保
	CBillboardEffect* pBillboardEffect = CBillboardEffect::Create(CBillboardEffect::TYPE::MINIGAME_FAILED, pos, SIZE);

	//ダウンキャスト
	CMiniGameFailed* pMiniGameFailed = CObject::DownCast<CMiniGameFailed, CBillboardEffect>(pBillboardEffect);

	//ターゲット情報が存在する場合
	if (pMiniGameFailed != nullptr)
	{
		//パラメータ設定
		pMiniGameFailed->m_pTargetObj = pObj;//対象オブジェクトのポインタ
		pMiniGameFailed->m_DiffDistance = pos - pObj->GetPos();//対象オブジェクトとの距離

		//初期化処理
		pMiniGameFailed->Init();
	}

	return pMiniGameFailed;
}

//===========================================================================================================
// 座標調節
//===========================================================================================================
void CMiniGameFailed::OffSetPos()
{
	//座標取得
	D3DXVECTOR3 pos = GetPos();

	//常に対象オブジェクトとの距離が一定になるように調整
	pos = m_pTargetObj->GetPos() + m_DiffDistance;

	//座標設定
	SetPos(pos);
}

//===========================================================================================================
// 表示時間減少
//===========================================================================================================
void CMiniGameFailed::DecDisPlayTime()
{
	//表示時間減少
	m_nDisPlayTime--;

	//表示時間が0
	if (m_nDisPlayTime <= 0)
	{
		//終了処理
		Uninit();
	}
}

