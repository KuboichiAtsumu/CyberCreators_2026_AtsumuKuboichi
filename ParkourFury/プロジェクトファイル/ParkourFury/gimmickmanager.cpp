//==============================================================================================================================================
//
// ギミック情報管理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "gimmickmanager.h"//ギミックマネージャー

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CGimmickManager::CGimmickManager() : CObjectManager()
{
	//静的メンバ変数初期化
	m_pTop = nullptr;//先頭アドレス
	m_pCur = nullptr;//終端アドレス
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CGimmickManager::~CGimmickManager()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CGimmickManager::Init()
{
	//オブジェクトマネージャー初期化処理
	if (FAILED(CObjectManager::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CGimmickManager::Uninit()
{
	//オブジェクトマネージャー終了処理
	CObjectManager::Uninit();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CGimmickManager::Update()
{
	//先頭アドレスを取得する
	CGimmick* pGimmick = m_pTop;

	//オブジェクト情報がnullptrになるまで繰り返す
	while (pGimmick != nullptr)
	{
		//次のオブジェクト情報を取得
		CGimmick* pNext = pGimmick->GetNext();

		//削除フラグがtrueの場合
		if (pGimmick->GetDeleteFlag())
		{
			//前のオブジェクト情報を取得
			CGimmick* pPrev = pGimmick->GetPrev();

			//前のオブジェクト情報が存在する場合
			if (pPrev != nullptr)
			{
				//次のオブジェクト情報を繋ぐ
				pPrev->SetNext(pNext);
			}
			//前のオブジェクト情報が存在しない場合
			else
			{
				//次のオブジェクト情報の前のオブジェクト情報をnullptrに設定
				pNext->SetPrev(nullptr);

				//先頭アドレスを変更
				m_pTop = pNext;
			}

			//次のオブジェクト情報が存在する場合
			if (pNext != nullptr)
			{
				//前のオブジェクト情報を繋ぐ
				pNext->SetPrev(pPrev);
			}
			//次のオブジェクト情報が存在しない場合
			else
			{
				//前のオブジェクト情報の次のオブジェクト情報をnullptrに設定
				pPrev->SetNext(nullptr);

				//終端アドレスを変更
				m_pCur = pPrev;
			}
		}

		//オブジェクト情報を次の情報に変更する
		pGimmick = pNext;
	}
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CGimmickManager::Draw()
{
}

//===========================================================================================================
// 登録処理
//===========================================================================================================
void CGimmickManager::Regist(CGimmick* pGimmick)
{
	//先頭アドレスが存在しない場合
	if (m_pTop == nullptr)
	{
		//生成したブロック情報を先頭アドレスに代入
		m_pTop = pGimmick;

		//前のオブジェクト情報にnullptrを代入
		pGimmick->SetPrev(nullptr);
	}

	//先頭アドレスが存在する場合
	else
	{
		//先頭アドレスを取得
		CGimmick* Gimmick = m_pTop;

		//オブジェクト情報がnullptrになるまで繰り返す
		while (Gimmick != nullptr)
		{
			//次のオブジェクト情報が存在しない場合
			if (Gimmick->GetNext() == nullptr)
			{
				//次のオブジェクト情報に生成したブロック情報を保存
				Gimmick->SetNext(pGimmick);

				//生成したブロック情報の前のオブジェクト情報を保存
				pGimmick->SetPrev(Gimmick);
				break;
			}

			//オブジェクト情報を次の情報に変更する
			Gimmick = Gimmick->GetNext();
		}
	}

	//自身の次のオブジェクト情報にnullptrを代入
	pGimmick->SetNext(nullptr);

	//終端アドレスを代入
	m_pCur = pGimmick;
}

//===========================================================================================================
// 当たり判定
//===========================================================================================================
void CGimmickManager::Collision(CGimmick::CollisionParam& aParam, CGimmick::TYPE type)
{
	//先頭アドレスを取得する
	CGimmick* pGimmick = m_pTop;

	//オブジェクト情報がnullptrになるまで繰り返す
	while (pGimmick != nullptr)
	{
		//次のオブジェクト情報を取得
		CGimmick* pNext = pGimmick->GetNext();

		//指定したタイプと一致した場合
		if (pGimmick->GetType() == type)
		{
			//当たり判定
			pGimmick->Collision(aParam);
		}

		//オブジェクト情報を次の情報に変更する
		pGimmick = pNext;
	}
}

//===========================================================================================================
// 検索処理
//===========================================================================================================
CGimmick* CGimmickManager::Find(CGimmick::TYPE type)
{
	//先頭の情報を取得
	CGimmick* pGimmick = m_pTop;

	//次のエネミー情報がnullptrになるまで繰り返す
	while (pGimmick != nullptr)
	{
		//タイプが一致した場合
		if (pGimmick->GetType() == type)
		{
			//ポインタを返す
			return pGimmick;
		}

		//次のエネミー情報のポインタをコピー
		pGimmick = pGimmick->GetNext();
	}

	return nullptr;
}

//===========================================================================================================
// ギミック情報読込処理
//===========================================================================================================
void CGimmickManager::Load()
{
	//ローカル変数宣言
	D3DXVECTOR3 pos = { 0.0f,0.0f,0.0f };//位置
	D3DXVECTOR3 rot = { 0.0f,0.0f,0.0f };//向き
	D3DXVECTOR3 scale = { 1.0f,1.0f,1.0f };//拡大率
	int nNumAll = 0;//総数
	int nTag = 0;//タグ
	int nType = 0;//タイプ

	//ファイルを開く
	FILE* pFile = fopen(CManager::GetInstance()->StageFile[static_cast<int>(CManager::GetInstance()->GetScene()->GetMode())], "rb");

	//オブジェクトデータの読み込み
	if (pFile != nullptr)
	{
		//ファイルの読み込み
		fread(&nNumAll, sizeof(int), 1, pFile);

		for (int nCnt = 0; nCnt < nNumAll; nCnt++)
		{
			//データの取得
			fread(&pos, sizeof(D3DXVECTOR3), 1, pFile);//位置
			fread(&rot, sizeof(D3DXVECTOR3), 1, pFile);//向き
			fread(&scale, sizeof(D3DXVECTOR3), 1, pFile);//拡大率
			fread(&nTag, sizeof(int), 1, pFile);//カテゴリー
			fread(&nType, sizeof(int), 1, pFile);//種類

			//タグがギミックの場合
			if (static_cast<CTag::TAG>(nTag) == CTag::TAG::GIMMICK)
			{
				//ギミックを生成
				CGimmick::Create(pos, scale, static_cast<CGimmick::TYPE>(nType));
			}
		}

		//ファイルを閉じる
		fclose(pFile);
	}
}
