//==============================================================================================================================================
//
// ターゲットに関する処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "target.h"

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CTarget::CTarget(int nPriority)	: CBillboardEffect(nPriority),
	m_pTargetObj(nullptr)
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CTarget::~CTarget()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CTarget::Init()
{
	//基底クラス初期化処理
	if (FAILED(CBillboardEffect::Init())) return E_FAIL;

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CTarget::Uninit()
{
	//基底クラス終了処理
	CBillboardEffect::Uninit();
}

//===========================================================================================================
// 解放処理
//===========================================================================================================
void CTarget::Release()
{
	//対象オブジェクトをnullptrにする
	m_pTargetObj = nullptr;

	//基底クラス解放処理
	CBillboardEffect::Release();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CTarget::Update()
{
	//対象オブジェクトとの距離計算処理
	CalculationRange();

	//基底クラス更新処理
	CBillboardEffect::Update();
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CTarget::Draw()
{
	//基底クラス描画処理
	CBillboardEffect::Draw();
}

//===========================================================================================================
// 生成処理
//===========================================================================================================
CTarget* CTarget::Create(const D3DXVECTOR3& pos, CObject3D* pObj)
{
	//メモリを動的確保
	CTarget* pTarget = dynamic_cast<CTarget*>(CBillboardEffect::Create(CBillboardEffect::TYPE::TARGET, pos, SIZE));

	//ターゲット情報が存在する場合
	if (pTarget != nullptr)
	{
		//パラメータ設定
		pTarget->m_pTargetObj = pObj;//対象オブジェクトのポインタ

		//初期化処理
		pTarget->Init();
	}

	return pTarget;
}

//===========================================================================================================
// 対象オブジェクトとの距離計算処理
//===========================================================================================================
void CTarget::CalculationRange()
{
	//目標の位置までの差分を求める
	D3DXVECTOR3 Difference = GetPos() - m_pTargetObj->GetPos();

	//目標の位置に達した場合
	if (abs(Difference.x) < 1.0f &&
		abs(Difference.y) < 1.0f &&
		abs(Difference.z) < 1.0f)
	{
		//終了処理
		Uninit();
	}
}
