//==============================================================================================================================================
//
// 2Dエフェクトに関する処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "effect2D.h"
#include "nice.h"
#include "great.h"
#include "excellent.h"
#include "bad.h"

//===========================================================================================================
// 静的メンバ変数初期化
//===========================================================================================================
CEffect2D* CEffect2D::m_pEffect2D = nullptr;//自分自身のポインタ

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CEffect2D::CEffect2D(int nPriority) : CObject2D(nPriority),
	m_TargetSize( 0.0f, 0.0f ),
	m_ScaleDown( 0.0f, 0.0f ),
	m_Type(TYPE::NONE),
	m_nScaleDownFrame(SCALE_DOWN_FRAME)
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CEffect2D::~CEffect2D()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CEffect2D::Init()
{
	//自身のタイプをint型で保存
	int nType = static_cast<int>(m_Type);

	//テクスチャ生成
	CTexture* pTex = CTexture::GetInstance();//取得
	int nTexIdx = pTex->Regist(CTag::TAG::EFFECT_2D, nType, CEffect2D::TEXTURE_FILE[nType]);//登録
	BindTexture(pTex->GetAddress(nTexIdx));//設定

	//現在のサイズ取得
	D3DXVECTOR2 size = GetSize();

	//パラメータ設定
	m_TargetSize = size;//目標のサイズを設定
	SetSize(size * MAG_CREATE_SIZE);//拡大された状態でサイズを設定
	m_ScaleDown = (m_TargetSize - GetSize()) / static_cast<float>(SCALE_DOWN_FRAME);

	//基底クラス初期化処理
	if (FAILED(CObject2D::Init())) return E_FAIL;

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CEffect2D::Uninit()
{
	//自分自身のポインタをnullptrに設定
	m_pEffect2D = nullptr;

	//基底クラス終了処理
	CObject2D::Uninit();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CEffect2D::Update()
{
	//カラー変更処理
	ColorChange();

	//サイズ縮小処理
	ScaleDownSize();

	//基底クラス更新処理
	CObject2D::Update();
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CEffect2D::Draw()
{
	//基底クラス描画処理
	CObject2D::Draw();
}

//===========================================================================================================
// 生成処理
//===========================================================================================================
CEffect2D* CEffect2D::Create(TYPE type, const D3DXVECTOR2& pos, const D3DXVECTOR3& rot)
{
	//自身のポインタが既に存在する場合
	if (m_pEffect2D != nullptr)
	{
		//自分自身のタイプがExcellentの場合
		if (m_pEffect2D->m_Type == TYPE::EXCELLENT)
		{
			//新しく生成しない
			return m_pEffect2D;
		}

		//終了処理
		m_pEffect2D->Uninit();
	}

	//タイプに応じて動的確保
	switch (type)
	{
		//NICE
	case TYPE::NICE:
		m_pEffect2D = NEW CNice();
		break;

		//GREAT
	case TYPE::GREAT:
		m_pEffect2D = NEW CGreat();
		break;

		//EXCELLENT
	case TYPE::EXCELLENT:
		m_pEffect2D = NEW CExcellent();
		break;

		//BAD
	case TYPE::BAD:
		m_pEffect2D = NEW CBad();
		break;

	default:
		break;
	}

	//ポインタがnullptrではない
	if (m_pEffect2D != nullptr)
	{
		//パラメータ設定
		m_pEffect2D->m_Type = type;//タイプ
		m_pEffect2D->SetPos(pos);//座標
		m_pEffect2D->SetRot(rot);//角度
		m_pEffect2D->SetColor({ 1.0f, 1.0f, 1.0f, 0.0f });//カラー

		//初期化処理
		m_pEffect2D->Init();
	}

	return m_pEffect2D;
}

//===========================================================================================================
// カラー変更処理
//===========================================================================================================
void CEffect2D::ColorChange()
{
	//カラー情報取得
	D3DXCOLOR col = GetColor();

	//α値を上げる
	if (col.a < 1.0f)
	{
		//α値を上げる
		col.a += COLOR_SPEED;
	}

	//カラー情報設定
	SetColor(col);
}

//===========================================================================================================
// サイズ縮小処理
//===========================================================================================================
void CEffect2D::ScaleDownSize()
{
	//縮小フレームが0なら処理をしない
	if (m_nScaleDownFrame <= 0) return;

	//縮小フレームを減少
	m_nScaleDownFrame--;

	//現在のサイズを取得
	D3DXVECTOR2 size = GetSize();

	//縮小
	size += m_ScaleDown;

	//サイズ設定
	SetSize(size);
}
