//==============================================================================================================================================
//
// 看板に関する処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "signboard.h"

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CSignBoard::CSignBoard(int nPriority) :
	CObjectX{ nPriority },
	m_pPrev{ nullptr },
	m_pNext{ nullptr },
	m_Type{ TYPE::NONE }
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CSignBoard::~CSignBoard()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CSignBoard::Init()
{
	//自身のタイプをint型で保存
	int nType = static_cast<int>(m_Type);

	//テクスチャ生成
	CTexture* pTex = CTexture::GetInstance();//取得
	int nTexIdx = pTex->Regist(CTag::TAG::SIGN_BOARD, nType, CSignBoard::TEXTURE_FILE[nType]);//登録
	BindTexture(pTex->GetAddress(nTexIdx));//設定

	//テクスチャ生成
	CXfile* pModel = CXfile::GetInstance();//取得
	int nModelIdx = pModel->Regist(CTag::TAG::SIGN_BOARD, 1, "data/MODEL/SIGNBOARD/SignBoard.x");//登録
	BindModel(pModel->GetAddress(nModelIdx));//設定

	//基底クラス初期化処理
	if (FAILED(CObjectX::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CSignBoard::Uninit()
{
	//基底クラス終了処理
	CObjectX::Uninit();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CSignBoard::Update()
{
	//基底クラス更新処理
	CObjectX::Update();
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CSignBoard::Draw()
{
	//エディタ中は描画しない
	if (CManager::GetInstance()->GetScene()->GetSceneState() != CScene::SCENE::GAME) return;

	//基底クラス描画処理
	CObjectX::Draw();
}

//===========================================================================================================
// 生成処理
//===========================================================================================================
#include "signboardmanager.h"
CSignBoard* CSignBoard::Create(TYPE type, D3DXVECTOR3 pos, D3DXVECTOR3 scale, D3DXVECTOR3 rot)
{
	//メモリを動的確保
	CSignBoard* pSignBoard = NEW CSignBoard(static_cast<int>(Category::SIGN_BOARD));

	//ポインタがnullptrではない場合
	if (pSignBoard != nullptr)
	{
		//パラメータ設定
		pSignBoard->m_Type = type;//タイプ
		pSignBoard->SetPos(pos);//座標
		pSignBoard->SetScale(scale);//拡大率
		pSignBoard->SetRot(rot);//角度

		//初期化処理
		pSignBoard->Init();

		//登録処理
		CManager::GetInstance()->GetScene()->GetSignBoardManager()->Regist(pSignBoard);
	}

	return pSignBoard;
}
