//==============================================================================================================================================
//
// ギミックに関する処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "gimmick.h"

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CGimmick::CGimmick(int nPriority) : CObjectX(nPriority)
{
	//メンバ変数初期化
	m_pPrev = nullptr;//前のギミック情報
	m_pNext = nullptr;//次のギミック情報
	m_Type = TYPE::NONE;//タイプ
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CGimmick::~CGimmick()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CGimmick::Init()
{
	//モデル生成
	CXfile* pModel = CXfile::GetInstance();//インスタンスを取得
	BindModel(pModel->GetAddress(CTag::TAG::GIMMICK, static_cast<int>(m_Type)));//設定
	SetSize();//サイズ設定

	//Xファイルオブジェクト初期化処理
	if (FAILED(CObjectX::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CGimmick::Uninit()
{
	//Xファイルオブジェクト終了処理
	CObjectX::Uninit();
}

//===========================================================================================================
// 解放処理
//===========================================================================================================
void CGimmick::Release()
{
	//Xファイルオブジェクト解放処理
	CObjectX::Release();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CGimmick::Update()
{
	//Xファイルオブジェクト更新処理
	CObjectX::Update();
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CGimmick::Draw()
{
	//エディタモードの場合
	if (CManager::GetInstance()->GetScene()->GetSceneState() == CScene::SCENE::EDIT_3D)
	{//描画せずに処理を抜ける
		return;
	}

	//Xファイルオブジェクト描画処理
	CObjectX::Draw();
}

//===========================================================================================================
// 生成処理
//===========================================================================================================
#include "gimmickmanager.h"
#include "playerspawner.h"
#include "rotationzone.h"
#include "bossspawner.h"
#include "bossmovepoint.h"
#include "ballspawner.h"
#include "ballmovepoint.h"
CGimmick* CGimmick::Create(D3DXVECTOR3 pos, D3DXVECTOR3 scale, TYPE type)
{
	//タイプに応じてメモリを動的確保
	CGimmick* pGimmick = nullptr;

	//タイプ別に動的確保
	switch (type)
	{
		//プレイヤースポナー
	case TYPE::PLAYER_SPAWNER:
		pGimmick = NEW CPlayerSpawner();
		break;

		//回転ゾーン
	case TYPE::ROTATION_ZONE:
		pGimmick = NEW CRotationZone();
		break;

		//ボススポナー
	case TYPE::BOSS_SPAWNER:
		pGimmick = NEW CBossSpawner();
		break;

		//ボス移動ポイント
	case TYPE::BOSS_MOVE:
		pGimmick = NEW CBossMovePoint();
		break;

		//ボールスポナー
	case TYPE::BALL_SPAWNER:
		pGimmick = NEW CBallSpawner();
		break;

		//ボール移動ポイント
	case TYPE::BALL_MOVE:
		pGimmick = NEW CBallMovePoint();
		break;

	default:
		break;
	}

	//ギミック情報が存在する場合
	if (pGimmick != nullptr)
	{
		//パラメータ設定
		pGimmick->m_Type = type;//タイプ
		pGimmick->SetPos(pos);//座標
		pGimmick->SetScale(scale);//拡大率

		//初期化処理
		pGimmick->Init();

		//マネージャー登録処理
		CManager::GetInstance()->GetScene()->GetGimmickManager()->Regist(pGimmick);
	}

	return pGimmick;
}

//===========================================================================================================
// 当たり判定
//===========================================================================================================
bool CGimmick::Collision(CollisionParam& aParam)
{
	//情報を取得
	bool bCollision = false;//当たり判定用フラグ
	D3DXVECTOR3 Pos = GetPos();//位置
	D3DXVECTOR3 Size = GetSize();//サイズ

	//重なった場合
	if ((aParam.pos.x >= Pos.x - Size.x * 0.5f
		&& aParam.pos.x <= Pos.x + Size.x * 0.5f)
		&& (aParam.pos.y >= Pos.y - Size.y * 0.5f
			&& aParam.pos.y <= Pos.y + Size.y * 0.5f)
		&& (aParam.pos.z >= Pos.z - Size.z * 0.5f
			&& aParam.pos.z <= Pos.z + Size.z * 0.5f))
	{
		//当たり判定のフラグをtrueにする
		bCollision = true;
	}

	return bCollision;
}
