//==============================================================================================================================================
//
// ステージ回転ゾーン処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "rotationzone.h"

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CRotationZone::CRotationZone() : CGimmick()
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CRotationZone::~CRotationZone()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CRotationZone::Init()
{
	//ギミック初期化処理
	if (FAILED(CGimmick::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CRotationZone::Uninit()
{
	//ギミック終了処理
	CGimmick::Uninit();
}

//===========================================================================================================
// 解放処理
//===========================================================================================================
void CRotationZone::Release()
{
	//ギミック解放処理
	CGimmick::Release();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
#include "player.h"
void CRotationZone::Update()
{
	//ギミック更新処理
	CGimmick::Update();

	//プレイヤーカテゴリーのオブジェクト情報を取得
	CObject* pFindObj = CObject::FindObject(CObject::Category::PLAYER);

	//プレイヤークラスにダウンキャスト
	CPlayer* pPlayer = CObject::DownCast<CPlayer, CObject>(pFindObj);

	//当たり判定用のパラメータ設定
	CollisionParam aParam = {};
	aParam.pos = pPlayer->GetPos();//座標
	aParam.oldpos = pPlayer->GetOldPos();//更新前の座標
	aParam.rot = pPlayer->GetRot();//角度

	//当たり判定
	Collision(aParam);

	//修正した位置を設定
	pPlayer->SetPos(aParam.pos);
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CRotationZone::Draw()
{
#ifdef _DEBUG
	//ギミック描画処理
	CGimmick::Draw();
#endif // _DEBUG
}

//===========================================================================================================
// 当たり判定
//===========================================================================================================
bool CRotationZone::Collision(CollisionParam& aParam)
{
	//情報を取得
	bool bCollision = false;//当たり判定用フラグ
	D3DXVECTOR3 Pos = GetPos();//位置
	D3DXVECTOR3 Size = GetSize();//サイズ

	//重なった場合
	if ((aParam.pos.x >= Pos.x - Size.x * 0.5f
		&& aParam.pos.x <= Pos.x + Size.x * 0.5f)
		&& (aParam.pos.z >= Pos.z - Size.z * 0.5f
			&& aParam.pos.z <= Pos.z + Size.z * 0.5f))
	{
		//1フレーム前は重なっていない場合
		if ((aParam.oldpos.x < Pos.x - Size.x * 0.5f
			|| aParam.oldpos.x > Pos.x + Size.x * 0.5f)
			|| (aParam.oldpos.z < Pos.z - Size.z * 0.5f
				|| aParam.oldpos.z > Pos.z + Size.z * 0.5f))
		{
			//カメラ回転処理
			CameraRotation(aParam);

			//当たり判定のフラグをtrueにする
			bCollision = true;
		}
	}

	return bCollision;
}

//===========================================================================================================
// カメラ回転処理
//===========================================================================================================
void CRotationZone::CameraRotation(CollisionParam& aParam)
{
	//カメラの情報を取得
	CCamera* pCamaera = CManager::GetInstance()->GetCamera();

	//カメラのY軸の角度を保存して補正
	float fCameraRot_Y = pCamaera->GetRot().y;
	CorrectionRot(fCameraRot_Y);

	//左向きの角度を保存して補正
	float fRot_Y_L = fCameraRot_Y + D3DX_PI * 0.5f;
	CorrectionRot(fRot_Y_L);

	//右向きの角度を保存して補正
	float fRot_Y_R = fCameraRot_Y - D3DX_PI * 0.5f;
	CorrectionRot(fRot_Y_R);

	//座標情報を保存
	D3DXVECTOR3 pos = GetPos();

	//プレイヤーの角度に応じてカメラを回転
	if (aParam.rot.y == fRot_Y_L)
	{//左向きの場合

		//カメラを右回転状態にする
		pCamaera->SetState(CCamera::STATE::RIGHTTURN);

		//プレイヤーの位置をギミックの位置に修正
		aParam.pos.x = pos.x;
		aParam.pos.z = pos.z;
	}
	else if (aParam.rot.y == fRot_Y_R)
	{//右向きの場合

		//カメラを左回転状態にする
		pCamaera->SetState(CCamera::STATE::LEFTTURN);

		//プレイヤーの位置をギミックの位置に修正
		aParam.pos.x = pos.x;
		aParam.pos.z = pos.z;
	}
}
