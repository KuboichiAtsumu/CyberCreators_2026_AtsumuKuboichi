//==============================================================================================================================================
//
// UI管理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "UImanager.h"

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CUIManager::CUIManager() : CObjectManager()
{
	//メンバ変数初期化
	m_pTop = nullptr;//先頭アドレス
	m_pCur = nullptr;//終端アドレス
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CUIManager::~CUIManager()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CUIManager::Init()
{
	//オブジェクトマネージャー初期化処理
	if (FAILED(CObjectManager::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CUIManager::Uninit()
{
	//オブジェクトマネージャー終了処理
	CObjectManager::Uninit();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CUIManager::Update()
{
	//先頭アドレスを取得する
	CUI* pUI = m_pTop;

	//オブジェクト情報がnullptrになるまで繰り返す
	while (pUI != nullptr)
	{
		//次のオブジェクト情報を取得
		CUI* pNext = pUI->GetNextUI();

		//エリア情報が存在する場合
		//削除フラグがtrueの場合
		if (pUI != nullptr && pUI->GetDeleteFlag())
		{
			//前のオブジェクト情報を取得
			CUI* pPrev = pUI->GetPrevUI();

			//前のオブジェクト情報が存在する場合
			if (pPrev != nullptr)
			{
				//次のオブジェクト情報を繋ぐ
				pPrev->SetNextUI(pNext);
			}
			//前のオブジェクト情報が存在しない場合
			else
			{
				//次ののオブジェクト情報の前のオブジェクト情報をnullptrに設定
				pNext->SetPrevUI(nullptr);

				//先頭アドレスを変更
				m_pTop = pNext;
			}

			//次のオブジェクト情報が存在する場合
			if (pNext != nullptr)
			{
				//前のオブジェクト情報を繋ぐ
				pNext->SetPrevUI(pPrev);
			}
			//次のオブジェクト情報が存在しない場合
			else
			{
				//前のオブジェクト情報の次のオブジェクト情報をnullptrに設定
				pPrev->SetNextUI(nullptr);

				//終端アドレスを変更
				m_pCur = pPrev;
			}
		}

		//オブジェクト情報を次の情報に変更する
		pUI = pNext;
	}

	//インデックス調整処理
	FillIdx();
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CUIManager::Draw()
{
}

//===========================================================================================================
// 登録処理
//===========================================================================================================
void CUIManager::Regist(CUI* pUI)
{
	//先頭アドレスが存在しない場合
	if (m_pTop == nullptr)
	{
		//生成したエリア情報を先頭アドレスに代入
		m_pTop = pUI;

		//前のオブジェクト情報にnullptrを代入
		pUI->SetPrevUI(nullptr);
	}

	//先頭アドレスが存在する場合
	else
	{
		//先頭アドレスを取得
		CUI* pAllUI = m_pTop;

		//オブジェクト情報がnullptrになるまで繰り返す
		while (pAllUI != nullptr)
		{
			//次のオブジェクト情報が存在しない場合
			if (pAllUI->GetNextUI() == nullptr)
			{
				//次のオブジェクト情報に生成したエリア情報を保存
				pAllUI->SetNextUI(pUI);

				//生成したエリア情報の前のオブジェクト情報を保存
				pUI->SetPrevUI(pAllUI);
				break;
			}

			//オブジェクト情報を次の情報に変更する
			pAllUI = pAllUI->GetNextUI();
		}
	}

	//自身の次のオブジェクト情報にnullptrを代入
	pUI->SetNextUI(nullptr);

	//終端アドレスを代入
	m_pCur = pUI;
}

//===========================================================================================================
// 読込処理
//===========================================================================================================
void CUIManager::Load()
{
	//ローカル変数宣言
	CManager* pManager = CManager::GetInstance();//マネージャーのインスタンス
	int nNumAll = 0;//総数

	//ファイルを開く
	FILE* pFile = fopen(pManager->UIFile[static_cast<int>(pManager->GetScene()->GetMode())], "rb");

	//ファイルが開けなかった
	if (pFile == nullptr)
	{
		//処理を受ける
		return;
	}

	//ファイルの読み込み
	fread(&nNumAll, sizeof(int), 1, pFile);

	for (int nCnt = 0; nCnt < nNumAll; nCnt++)
	{
		//データの取得
		int nType = 0;
		fread(&nType, sizeof(int), 1, pFile);//タイプ

		D3DXVECTOR2 pos(0.0f, 0.0f);
		fread(&pos, sizeof(D3DXVECTOR2), 1, pFile);//座標

		D3DXVECTOR2 size(0.0f, 0.0f);
		fread(&size, sizeof(D3DXVECTOR2), 1, pFile);//サイズ

		D3DXVECTOR3 rot(0.0f, 0.0f, 0.0f);
		fread(&rot, sizeof(D3DXVECTOR3), 1, pFile);//角度

		bool bSaveEditFlag = true;
		fread(&bSaveEditFlag, sizeof(bool), 1, pFile);//エディット可能フラグ

		//UIを生成
		if (bSaveEditFlag)
		{
			CUI::Create(static_cast<CUI::TYPE>(nType), pos, size, rot);
		}
	}

	//ファイルを閉じる
	fclose(pFile);
}

//===========================================================================================================
// 検索処理
//===========================================================================================================
CUI* CUIManager::FindUI(CUI::TYPE type)
{
	//先頭のポインタをコピー
	CUI* pUI = m_pTop;

	//次のブロック情報がnullptrになるまで繰り返す
	while (pUI != nullptr)
	{
		//タイプが一致した場合
		if (pUI->GetUIType() == type)
		{
			return pUI;
		}

		//次のブロック情報のポインタをコピー
		pUI = pUI->GetNextUI();
	}

	return nullptr;
}

//===========================================================================================================
// インデックス調整処理
//===========================================================================================================
void CUIManager::FillIdx()
{
	//オブジェクト数カウンタ
	int nCnt = 0;

	//先頭アドレスを取得する
	CUI* pUI = m_pTop;

	//オブジェクト情報がnullptrになるまで繰り返す
	while (pUI != nullptr)
	{
		//次のオブジェクト情報を取得
		CUI* pNext = pUI->GetNextUI();

		//インデックス設定
		pUI->SetIdx(nCnt);

		//オブジェクト情報を次の情報に変更する
		pUI = pNext;

		//カウンタを加算
		nCnt++;
	}
}
