//==============================================================================================================================================
//
// フェードに関する処理のヘッダーファイル
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================
#ifndef _FADE_H_ //このマクロ定義がされなかったら
#define _FADE_H_ //2重インクルード防止のマクロ定義

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "scene.h"

//===========================================================================================================
// クラス定義
//===========================================================================================================
class CFade
{
public:
	//======================================
	// 列挙型定義
	//======================================
	enum class STATE
	{
		FADE_NONE = 0,//フェードしていない
		FADE_IN,//フェードイン
		FADE_OUT,//フェードアウト
		MAX,
	};

	//======================================
	// 関数
	//======================================
	CFade();//コンストラクタ
	~CFade();//デストラクタ
	HRESULT Init();//初期化処理
	void Uninit();//終了処理
	void Update();//更新処理
	void Draw();//描画処理
	static CFade* Create();//生成処理
	void SetFade(CScene::MODE mode);//状態設定
	STATE GetFade() { return m_state; }//状態取得
	
private:
	//======================================
	// 変数
	//======================================
	const float FADE_SPEED = 0.05f;//フェードの速度
	CScene::MODE m_NextMode;//次のモード
	STATE m_state;//現在の状態
	LPDIRECT3DVERTEXBUFFER9 m_pVtxBuff;//頂点バッファ
	D3DXVECTOR2 m_pos;//座標
	D3DXVECTOR3 m_rot;//角度
	D3DXVECTOR2 m_size;//サイズ
	D3DXCOLOR m_col;//カラー
	float m_fAngle;//対角線の角度
	float m_fLength;//対角線の長さ
};

#endif