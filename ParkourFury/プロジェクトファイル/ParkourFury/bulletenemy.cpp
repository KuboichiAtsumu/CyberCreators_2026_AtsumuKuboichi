//==============================================================================================================================================
//
// バレットエネミーに関する処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "bulletenemy.h"

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CBulletEnemy::CBulletEnemy() : 
	CEnemy(),
	m_nCntShot{ 0 }
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CBulletEnemy::~CBulletEnemy()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CBulletEnemy::Init()
{
	//基底クラス初期化処理
	if (FAILED(CEnemy::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CBulletEnemy::Uninit()
{
	//基底クラス終了処理
	CEnemy::Uninit();
}

//===========================================================================================================
// 解放処理
//===========================================================================================================
void CBulletEnemy::Release()
{
	//基底クラス解放処理
	CEnemy::Release();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
#include "player.h"
void CBulletEnemy::Update()
{
	//基底クラス更新処理
	CEnemy::Update();

	//プレイヤーカテゴリーのオブジェクトを検索
	CObject* pFindObj = CObject::FindObject(CObject::Category::PLAYER);

	//検索結果が不一致
	if (pFindObj == nullptr)
	{
		return;
	}

	//プレイヤークラスにダウンキャスト
	CPlayer* pPlayer = CObject::DownCast<CPlayer, CObject>(pFindObj);

	//ダウンキャスト失敗
	if (pPlayer == nullptr)
	{
		return;
	}

	//ローカル変数宣言
	D3DXVECTOR3 pos = GetPos();//自分自身の座標
	D3DXVECTOR3 rot = GetRot();//自分自身の角度
	D3DXVECTOR3 PlayerPos = pPlayer->GetPos();//プレイヤーの座標

	//各座標のプレイヤーとの距離を求める
	D3DXVECTOR3 Distance{ pos.x - PlayerPos.x, pos.y - PlayerPos.y, pos.z - PlayerPos.z };

	//プレイヤーまでの直線距離を求める
	float fDistanceXZ = sqrtf(powf(Distance.x, 2.0f) + powf(Distance.z, 2.0f)) * 0.5f;
	float fLineDistance = sqrtf(powf(fDistanceXZ, 2.0f) + powf(Distance.y, 2.0f)) * 0.5f;

	//可動範囲外だった場合
	if (fLineDistance > MOVABLE)
	{
		//処理を抜ける
		return;
	}

	//プレイヤーまでの角度を求める
	D3DXVECTOR3 Angle(atan2f(Distance.y, Distance.z), atan2f(Distance.x, Distance.z), atan2f(Distance.x, Distance.y));

	//エネミーをプレイヤーの方向に向ける
	SetRot(Angle);

	//発射処理
	Shot(Distance);
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CBulletEnemy::Draw()
{
	//エディタモードの場合
	if (CManager::GetInstance()->GetScene()->GetSceneState() == CScene::SCENE::EDIT_3D)
	{//描画せずに処理を抜ける
		return;
	}

	//基底クラス描画処理
	CEnemy::Draw();
}

//===========================================================================================================
// 当たり判定
//===========================================================================================================
bool CBulletEnemy::Collision(CollisionParam& aParam)
{
	//当たり判定フラグ
	bool bCollision = false;

	//基底クラス当たり判定
	bCollision = CEnemy::Collision(aParam);

	return bCollision;
}

//===========================================================================================================
// 発射処理
//===========================================================================================================
void CBulletEnemy::Shot(D3DXVECTOR3 Distance)
{
	//発射カウンタを加算
	m_nCntShot++;

	//カウンタが最大値に達した場合
	if (m_nCntShot == INTERVAL_SHOT * MAX_FRAME)
	{
		//各座標の距離を正規化
		D3DXVec3Normalize(&Distance, &Distance);

		//弾の移動量を設定
		D3DXVECTOR3 BulletMove = Distance * SHOT_POWER;

		//弾を発射
		// Create

		//カウンタリセット
		m_nCntShot = 0;
	}
}
