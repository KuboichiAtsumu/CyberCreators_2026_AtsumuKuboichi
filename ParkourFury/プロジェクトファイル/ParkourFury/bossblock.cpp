//==============================================================================================================================================
//
// ボスブロックに関する処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "bossblock.h"

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CBossBlock::CBossBlock() : CBlock(),
	m_TargetScale( 1.0f, 1.0f, 1.0f ),
	m_fAddScale_Y(0.0f),
	m_fAddScale_Z(0.0f)
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CBossBlock::~CBossBlock()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CBossBlock::Init()
{
	//基底クラス初期化処理
	if (FAILED(CBlock::Init()))
	{
		return E_FAIL;
	}

	//目標の拡大率を保存
	m_TargetScale = GetScale();

	//拡大率を0にする(X軸以外)
	SetScale({ 1.0f,0.0f,0.0f });

	//各軸の拡大量を設定
	m_fAddScale_Y = m_TargetScale.y / (MAX_FRAME * SCALING_END_TIME);//Y軸
	m_fAddScale_Z = m_TargetScale.z / (MAX_FRAME * SCALING_END_TIME);//Z軸

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CBossBlock::Uninit()
{
	//基底クラス終了処理
	CBlock::Uninit();
}

//===========================================================================================================
// 解放処理
//===========================================================================================================
void CBossBlock::Release()
{
	//基底クラス解放処理
	CBlock::Release();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CBossBlock::Update()
{
	//基底クラス更新処理
	CBlock::Update();

	//拡大処理
	Scaling();
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CBossBlock::Draw()
{
	//エディタモードの場合
	if (CManager::GetInstance()->GetScene()->GetSceneState() == CScene::SCENE::EDIT_3D)
	{//描画せずに処理を抜ける
		return;
	}

	//基底クラス描画処理
	CBlock::Draw();
}

//===========================================================================================================
// 拡大処理
//===========================================================================================================
void CBossBlock::Scaling()
{
	//現在の拡大率を取得
	D3DXVECTOR3 scale = GetScale();

	//Y軸の値が目標の値より小さい場合
	if (scale.y < m_TargetScale.y)
	{
		//Y軸の拡大率を加算
		scale.y += m_fAddScale_Y;
	}

	//Z軸の値が目標の値より小さい場合
	if (scale.z < m_TargetScale.z)
	{
		//Z軸の拡大率を加算
		scale.z += m_fAddScale_Z;
	}

	//拡大率情報を設定
	SetScale(scale);
}
