//==============================================================================================================================================
//
// ノーマルパーティクルに関する処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "normalparticle.h"

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CNormalParticle::CNormalParticle() : CParticle()
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CNormalParticle::~CNormalParticle()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CNormalParticle::Init()
{
	//基底クラス初期化処理
	if (FAILED(CParticle::Init())) return E_FAIL;
	
	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CNormalParticle::Uninit()
{
	//基底クラス終了処理
	CParticle::Uninit();
}

//===========================================================================================================
// 解放処理
//===========================================================================================================
void CNormalParticle::Release()
{
	//基底クラス解放処理
	CParticle::Release();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CNormalParticle::Update()
{
	//基底クラス更新処理
	CParticle::Update();
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CNormalParticle::Draw()
{
	//基底クラス描画処理
	CParticle::Draw();
}

//===========================================================================================================
// 移動量設定処理
//===========================================================================================================
void CNormalParticle::SetMoveValue()
{
	//各座標の移動方向ベクトルを設定
	float fX = static_cast<float>(rand() % MAX_SPEED + 1 - MAX_SPEED / 2) * 0.1f * SPEED;
	float fY = static_cast<float>(rand() % MAX_SPEED + 1 - MAX_SPEED / 2) * 0.1f * SPEED;
	float fZ = static_cast<float>(rand() % MAX_SPEED + 1 - MAX_SPEED / 2) * 0.1f * SPEED;

	//移動量設定
	SetMove({ fX, fY, fZ });
}
