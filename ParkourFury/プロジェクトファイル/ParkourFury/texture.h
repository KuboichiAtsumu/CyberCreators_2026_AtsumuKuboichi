//==============================================================================================================================================
//
// テクスチャに関する管理のヘッダーファイル
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================
#ifndef _TEXTURE_H_
#define _TEXTURE_H_

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "tag.h"

//===========================================================================================================
// クラス定義
//===========================================================================================================
class CTexture
{
private:
	CTexture();//コンストラクタ
	~CTexture();//デストラクタ

public:
	//======================================
	// 構造体定義
	//======================================

	//テクスチャ登録情報
	struct Texture
	{
		LPDIRECT3DTEXTURE9 pTexture;//テクスチャ情報
		CTag::TAG tag;//カテゴリー
		int nType;//タイプ
		int nIdx;//ID
		std::string FileName;//ファイルパス
	};

	//======================================
	// 関数
	//======================================
	static CTexture* GetInstance();//インスタンスの取得
	static void Release();//インスタンスの破棄
	void Load();//読み込み処理
	void Unload();//削除処理
	int Regist(CTag::TAG tag, int nType, std::string pTextureName);//登録処理
	LPDIRECT3DTEXTURE9 GetAddress(int nIdx) { return m_TextureInfo.at(nIdx).pTexture; }//情報取得処理 ( インデックス検索 )
	LPDIRECT3DTEXTURE9 GetAddress(CTag::TAG tag, int nType);//情報取得処理 ( カテゴリー・タイプ検索 )

private:
	//======================================
	// 変数
	//======================================
	static CTexture* m_pTexture;//インスタンス
	std::vector<Texture> m_TextureInfo;//テクスチャ情報
};

#endif
