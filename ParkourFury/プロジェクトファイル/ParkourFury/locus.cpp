//==============================================================================================================================================
//
// 軌跡の処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "locus.h"

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CLocus::CLocus(int nPriority) : CObjectX(nPriority),
	m_nLife(0),
	m_nMaxLife(0)
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CLocus::~CLocus()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CLocus::Init()
{
	//基底クラス初期化処理
	if (FAILED(CObjectX::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CLocus::Uninit()
{
	//基底クラス終了処理
	CObjectX::Uninit();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CLocus::Update()
{
	//寿命減少
	m_nLife--;

	//寿命が0
	if (m_nLife <= 0)
	{
		//終了処理
		Uninit();
	}

	//サイズ情報取得
	D3DXVECTOR3 Scale(1.0f, 1.0f, 1.0f);

	//寿命に合わせてサイズを減少
	Scale *= static_cast<float>(m_nLife) / static_cast<float>(m_nMaxLife);

	//サイズ情報を設定
	SetScale(Scale);

	//基底クラスの更新処理
	CObjectX::Update();
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CLocus::Draw()
{
	//基底クラス描画処理
	CObjectX::Draw();
}

//===========================================================================================================
// 生成処理
//===========================================================================================================
CLocus* CLocus::Create(const D3DXVECTOR3& pos, const D3DXVECTOR3& rot, CXfile::ModelInfo m_aModelInfo, int nLife)
{
	//タイプに応じてメモリを動的確保
	CLocus* pLocus = NEW CLocus(static_cast<int>(CObject::Category::EFFECT));

	//バレット情報が存在する場合
	if (pLocus != nullptr)
	{
		//パラメータ設定
		pLocus->SetPos(pos);//座標
		pLocus->SetRot(rot);//角度
		pLocus->BindModel(&m_aModelInfo);//モデル情報
		pLocus->m_nLife = nLife;//寿命
		pLocus->m_nMaxLife = nLife;//寿命の最大値
	
		//初期化処理
		pLocus->Init();
	}

	return pLocus;
}
