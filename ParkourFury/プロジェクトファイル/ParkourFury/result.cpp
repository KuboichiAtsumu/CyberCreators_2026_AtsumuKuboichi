//==============================================================================================================================================
//
// リザルト画面に関する処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "result.h"
#include "bg.h"

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CResult::CResult() : CScene()
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CResult::~CResult()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
#include "UI.h"
HRESULT CResult::Init()
{
	//BGM再生
	CManager::GetInstance()->GetSound()->Play(CSound::SOUND::BGM_RESULT);

	//基底クラス初期化処理
	if (FAILED(CScene::Init()))
	{
		return E_FAIL;
	}

	//背景生成
	CBg::Create(CBg::TYPE::RESULT);

	//生成カウント用
	int nCnt = 0;

	//リザルトタイム生成
	for (nCnt = 0; nCnt < 3; nCnt++)
	{
		CUI::Create(CUI::TYPE::RESULT_TIME, { 220.0f, 220.0f }, { 80.0f, 120.0f }, { 0.0f, 0.0f, 0.0f });
	}

	//リザルトキル数生成
	for (nCnt = 0; nCnt < 3; nCnt++)
	{
		CUI::Create(CUI::TYPE::RESULT_KILL, { 220.0f, 430.0f }, { 80.0f, 120.0f }, { 0.0f, 0.0f, 0.0f });
	}

	//リザルト平均ヒート量生成
	for (nCnt = 0; nCnt < 2; nCnt++)
	{
		CUI::Create(CUI::TYPE::RESULT_HEAT, { 140.0f, 640.0f }, { 80.0f, 120.0f }, { 0.0f, 0.0f, 0.0f });
	}

	//トータルスコア生成
	for (nCnt = 0; nCnt < 3; nCnt++)
	{
		CUI::Create(CUI::TYPE::TOTAL_SCORE, { 800.0f, 400.0f }, { 180.0f, 270.0f }, { 0.0f, 0.0f, 0.0f });
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CResult::Uninit()
{
	//BGM再生終了
	CManager::GetInstance()->GetSound()->Stop(CSound::SOUND::BGM_RESULT);

	//基底クラス終了処理
	CScene::Uninit();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CResult::Update()
{
	//マネージャーのインスタンス取得
	CManager* pManager = CManager::GetInstance();

	//Enterキーが押された場合
	//STARTボタンが押された場合
	if (pManager->GetKeyboard()->GetTrigger(DIK_RETURN) || 
		pManager->GetJoypad()->GetTrigger(CInputJoypad::JOYKEY::JOYKEY_START))
	{
		//SE再生
		pManager->GetSound()->Play(CSound::SOUND::SELECT);

		//タイトル画面へ移行
		pManager->GetFade()->SetFade(CScene::MODE::MODE_TITLE);
	}

	//基底クラス更新
	CScene::Update();
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CResult::Draw()
{
}

//===========================================================================================================
// 生成処理
//===========================================================================================================
CResult* CResult::Create()
{
	//メモリを動的確保
	CResult* pResult = NEW CResult();
	return pResult;
}
