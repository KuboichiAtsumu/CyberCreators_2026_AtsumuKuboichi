//==============================================================================================================================================
//
// タイマーに関する処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "timer.h"

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CTimer::CTimer()
{
	//メンバ変数初期化
	m_nCntFrame = 0;//フレームカウンタ
	m_nTimer = 0;//タイマー
	m_nDigit = 1;//桁数
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CTimer::~CTimer()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CTimer::Init()
{
	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CTimer::Uninit()
{
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
#include "game.h"
#include "timenumber.h"
void CTimer::Update()
{
	//エディタ中
	if (CManager::GetInstance()->GetScene()->GetSceneState() != CScene::SCENE::GAME) return;

	//フレームカウンタ加算
	m_nCntFrame++;

	//フレームカウンタがMAX_FRAMEに達していない場合
	if (m_nCntFrame != MAX_FRAME) return;
	
	//現在のタイマーが最大秒数より小さい
	if (m_nTimer < MAX_TIMER)
	{
		//タイマーを加算
		m_nTimer++;

		//平均ヒート量更新
		CGame::GetInstance()->AverageHeat();
	}

	//フレームカウンタをリセット
	m_nCntFrame = 0;

	//ローカル変数宣言
	int nNum = m_nTimer;//現在のタイマーを保存
	int nDigit = 0;//桁数

	//桁数を求める
	while (nNum != 0)
	{//nNumが0になるまで
		nNum /= 10;//タイマーを10で割る
		nDigit++;//桁数を加算
	}

	//桁数が0の場合、1に調整
	if (nDigit == 0)
	{
		nDigit = 1;
	}

	//桁数を反映
	m_nDigit = nDigit;

	//現在表示されている桁数を取得
	int nDigitDisPlay = CTimeNumber::GetDigit();

	//表示桁数が最大
	if (nDigitDisPlay == MAX_TIMER_DIGIT)
	{
		return;
	}
	
	//現在表示されている桁数と違う場合一桁追加
	if (m_nDigit != nDigitDisPlay)
	{
		CUI::Create(CUI::TYPE::TIME_NUMBER, { 1220.0f, 90.0f }, { 60.0f, 90.0f }, { 0.0f, 0.0f, 0.0f });
	}
}

//===========================================================================================================
// リセット処理
//===========================================================================================================
void CTimer::Reset()
{
	m_nCntFrame = 0;//フレームカウンタ
	m_nTimer = 0;//タイマー
	m_nDigit = 1;//桁数
}
