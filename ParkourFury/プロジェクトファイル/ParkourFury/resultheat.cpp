//==============================================================================================================================================
//
// リザルト平均ヒート量に関する処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "resultheat.h"
#include "game.h"

//===========================================================================================================
// 静的メンバ変数初期化
//===========================================================================================================
int CResultHeat::m_nDigit = 0;//桁数

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CResultHeat::CResultHeat() : CUI(),
	m_nIdx(m_nDigit)
{
	m_nDigit++;//桁数を加算
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CResultHeat::~CResultHeat()
{
	m_nDigit--;//桁数を減算
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CResultHeat::Init()
{
	//座標設定
	SetNumberPos(GetPos());

	//テクスチャ分割数
	SetDivisionTex_X(10);//横

	//エディット可能フラグ
	SetEditFlag(false);

	//ローカル変数宣言
	float fHeat = CGame::GetInstance()->GetResultScore().fAverageHeat;//平均ヒート量を取得
	int nHeat = static_cast<int>(fHeat);//int型にキャスト
	int nMulti = 1;//各桁の倍数

	//インデックスに合わせて倍数を求める
	for (int nCntTime = 0; nCntTime < m_nIdx + 1; nCntTime++)
	{
		nMulti *= 10;
	}

	// 該当する桁の数字を求める
	int nPosTex = (nHeat % nMulti) / (nMulti / 10);

	//横のアニメーションパターンを設定
	SetPatternAnim_X(nPosTex);

	//基底クラス初期化処理
	if (FAILED(CUI::Init())) return E_FAIL;

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CResultHeat::Uninit()
{
	//基底クラス終了処理
	CUI::Uninit();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CResultHeat::Update()
{
	//基底クラス更新処理
	CUI::Update();
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CResultHeat::Draw()
{
	//基底クラス描画処理
	CUI::Draw();
}

//===========================================================================================================
// 座標設定
//===========================================================================================================
void CResultHeat::SetNumberPos(const D3DXVECTOR2& pos)
{
	//桁数に応じて左にずらす
	SetPos({ pos.x - m_nIdx * (GetSize().x), pos.y });
}
