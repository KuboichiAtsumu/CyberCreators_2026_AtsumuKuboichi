//==============================================================================================================================================
//
// 煙に関する処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "smoke.h"

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CSmoke::CSmoke(int nPriority)
	: CBillboardEffect(nPriority),
	m_MaxSize{},
	m_nLife{ 10 },
	m_nMaxLife{ m_nLife }
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CSmoke::~CSmoke()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CSmoke::Init()
{
	//パラメータ設定
	SetMove({ 0.0f, SPEED, 0.0f });

	//基底クラス初期化処理
	if (FAILED(CBillboardEffect::Init())) return E_FAIL;
	
	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CSmoke::Uninit()
{
	//基底クラス終了処理
	CBillboardEffect::Uninit();
}

//===========================================================================================================
// 解放処理
//===========================================================================================================
void CSmoke::Release()
{
	//基底クラス解放処理
	CBillboardEffect::Release();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CSmoke::Update()
{
	//座標更新
	SetPos(GetPos() + GetMove());

	//寿命減少
	m_nLife--;

	//寿命が0
	if (m_nLife <= 0)
	{
		//終了処理
		Uninit();
	}

	//寿命に合わせて薄くする
	D3DXVECTOR3 size = GetSize();
	size.x = m_MaxSize.x * (static_cast<float>(m_nLife) / static_cast<float>(m_nMaxLife));
	size.y = m_MaxSize.y * (static_cast<float>(m_nLife) / static_cast<float>(m_nMaxLife));
	SetSize(size);

	//基底クラス更新処理
	CBillboardEffect::Update();
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CSmoke::Draw()
{
	//基底クラス描画処理
	CBillboardEffect::Draw();
}

//===========================================================================================================
// 生成処理
//===========================================================================================================
CSmoke* CSmoke::Create(const D3DXVECTOR3& pos, const D3DXVECTOR3& size, int nLife)
{
	//メモリを動的確保
	CSmoke* pSmoke = dynamic_cast<CSmoke*>(CBillboardEffect::Create(CBillboardEffect::TYPE::SMOKE, pos, size));

	//ターゲット情報が存在する場合
	if (pSmoke != nullptr)
	{
		//パラメータ設定
		pSmoke->m_MaxSize = size;//最大サイズ
		pSmoke->m_nLife = nLife;//ライフ
		pSmoke->m_nMaxLife = nLife;//最大ライフ

		//初期化処理
		pSmoke->Init();
	}

	return pSmoke;
}
