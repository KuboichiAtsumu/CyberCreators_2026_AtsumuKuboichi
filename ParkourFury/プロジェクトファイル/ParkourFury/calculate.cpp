//==============================================================================================================================================
//
// 計算処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "calculate.h"

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CCalculate::CCalculate()
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CCalculate::~CCalculate()
{
}

//===========================================================================================================
// 値の正負判断
//===========================================================================================================
int CCalculate::JudgePositive(float fNumber)
{
	//値が0.1以上
	if (fNumber > 0.0f)
	{
		return 1;
	}
	//値が0未満
	else if(fNumber < 0.0f)
	{
		return -1;
	}
	//値が0
	else
	{
		return 0;
	}
}

//===========================================================================================================
// float型乱数生成処理
//===========================================================================================================
float CCalculate::RandFloat(float MIN, float MAX)
{
	//float型乱数生成用デバイス
	std::random_device rd;
	std::default_random_engine eng(rd());

	//指定された範囲内から乱数を生成
	std::uniform_real_distribution<> distr(MIN, MAX);

	//生成された値を返す
	return static_cast<float>(distr(eng));
}
