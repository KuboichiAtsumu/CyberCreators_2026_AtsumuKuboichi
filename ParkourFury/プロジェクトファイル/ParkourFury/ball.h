//==============================================================================================================================================
//
// ボールに関する処理のヘッダーファイル
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================
#ifndef _BALL_H_ //このマクロ定義がされなかったら
#define _BALL_H_ //2重インクルード防止のマクロ定義

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "enemy.h"

//===========================================================================================================
// クラス定義
//===========================================================================================================
class CBall : public CEnemy
{
public:
	//======================================
	// 関数
	//======================================
	CBall();//コンストラクタ
	~CBall() override;//デストラクタ
	HRESULT Init() override;//初期化処理
	void Uninit() override;//終了処理
	void Release() override;//解放処理
	void Update() override;//更新処理
	void Draw() override;//描画処理
	virtual bool Collision(CollisionParam& aParam);//当たり判定
	void Reset();//リセット処理

private:
	//======================================
	// 関数
	//======================================
	void Turn();//回転処理
	void Gravity();//重力処理
	void Move();//移動処理
	void CollisionObj();//オブジェクトとの当たり判定
	void CollisionBlock(D3DXVECTOR3 BlockPos, D3DXVECTOR3 BlockSize);//ブロックとの当たり判定
	bool CollisionPoint(D3DXVECTOR3 PointPos, D3DXVECTOR3 PointSize);//ポイントとの当たり判定

	//======================================
	// 定数
	//======================================
	const float GRAVITY_POWER = 0.5f;//重力の強さ
	const float MAX_GRAVITY = -10.0f;//重力の最大強度
	const float TURN_SPEED = 0.06f;//回転速度
	const float MOVE_SPEED = 5.2f;//移動速度
	const float BOUND_POWER = -0.6f;//バウンド強度
	const float ADD_MOVE = MOVE_SPEED * 0.05f;//移動量加算量

	//======================================
	// 変数
	//======================================
	D3DXVECTOR3 m_TargetMove;//目標の移動量
	int m_nPointIdx;//現在いるポジションのインデックス
	bool m_bUpdateMove;//移動量更新フラグ
};

#endif
