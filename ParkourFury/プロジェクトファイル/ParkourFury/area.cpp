//==============================================================================================================================================
//
// エリア処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "area.h"
#include "areamanager.h"
#include "bossarea.h"
#include "minigamearea.h"
#include "chasearea.h"

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CArea::CArea(int nPriority) : CObjectX(nPriority)
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CArea::~CArea()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CArea::Init()
{
	//モデル生成
	CXfile* pModel = CXfile::GetInstance();//インスタンスを取得
	BindModel(pModel->GetAddress(CTag::TAG::AREA, static_cast<int>(m_Type)));//設定
	SetSize();//サイズ設定

	//基底クラス初期化処理
	if (FAILED(CObjectX::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CArea::Uninit()
{
	//基底クラス終了処理
	CObjectX::Uninit();
}

//===========================================================================================================
// 解放処理
//===========================================================================================================
void CArea::Release()
{
	//基底クラス解放処理
	CObjectX::Release();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CArea::Update()
{
	//基底クラス更新処理
	CObjectX::Update();
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CArea::Draw()
{
	//基底クラス描画処理
	CObjectX::Draw();
}

//===========================================================================================================
// 生成処理
//===========================================================================================================
CArea* CArea::Create(const D3DXVECTOR3& pos, const D3DXVECTOR3& rot, const D3DXVECTOR3& scale, TYPE type)
{
	//タイプに応じてメモリを動的確保
	CArea* pArea = nullptr;

	switch (type)
	{
		//ボスエリア
	case TYPE::BOSS:
		pArea = NEW CBossArea();
		break;

		//ミニゲームエリア
	case TYPE::MINI_GAME:
		pArea = NEW CMiniGameArea();
		break;

		//チェイスエリア
	case TYPE::CHASE:
		pArea = NEW CChaseArea();
		break;

	default:
		break;
	}

	//ブロック情報が存在する場合
	if (pArea != nullptr)
	{
		//パラメータ設定
		pArea->SetPos(pos);//座標
		pArea->SetRot(rot);//角度
		pArea->SetScale(scale);//拡大率
		pArea->SetAreaType(type);//ブロックタイプ設定

		//初期化処理
		pArea->Init();

		//マネージャー登録処理
		CManager::GetInstance()->GetScene()->GetAreaManager()->Regist(pArea);
	}

	return pArea;
}

//===========================================================================================================
// 当たり判定処理
//===========================================================================================================
bool CArea::Collision(const D3DXVECTOR3& pos)
{
	//情報を取得
	bool bCollision = false;//当たり判定用フラグ
	D3DXVECTOR3 Pos = GetPos();//位置
	D3DXVECTOR3 Size = GetSize();//サイズ

	//重なった場合
	if ((pos.x >= Pos.x - Size.x * 0.5f && 
			pos.x <= Pos.x + Size.x * 0.5f) && 
		(pos.y >= Pos.y - Size.y * 0.5f && 
			pos.y <= Pos.y + Size.y * 0.5f) && 
		(pos.z >= Pos.z - Size.z * 0.5f && 
			pos.z <= Pos.z + Size.z * 0.5f))
	{
		//当たり判定のフラグをtrueにする
		bCollision = true;
	}

	return bCollision;
}
